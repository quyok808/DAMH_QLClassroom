@using DoAnMon.IdentityCudtomUser
@using Microsoft.AspNetCore.Identity
@using System.Text
@inject UserManager<CustomUser> _userManager
@model IEnumerable<DoAnMon.Models.BaiNop>

@{
	ViewData["Title"] = "GetAllStu";
	Layout = "~/Views/Shared/_Layout1.cshtml";
}

<h2>Bài nộp của sinh viên</h2>
@{
	// Chuyển danh sách List<BaiNop> sang chuỗi JSON và mã hóa nó
	string baiNopJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model);
	string baiNopBase64 = Convert.ToBase64String(Encoding.UTF8.GetBytes(baiNopJson));
}
@{
	if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
	{
		<a asp-controller="ClassRooms" asp-action="DownloadFiles" asp-route-baiNop="@baiNopBase64">Download Files</a>
	}
}

<table class="table">
	<thead>
		<tr>
			<th>
				Mã lớp
			</th>
			<th>
				Thời gian nộp
			</th>
			<th>
				Tên người nộp
			</th>
			<th>
				File nộp
			</th>
			<th>
				Điểm
			</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.ClassId)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.SubmittedAt)
				</td>
				<td>
					@{
						var user = await _userManager.FindByIdAsync(@item.UserId);
					}
					@Html.DisplayFor(modelItem => user.Name)

				</td>
				<td>
					<a href="/BAINOP/@item.Urlbainop" download>@item.Urlbainop</a>
				</td>
				<td>
					<span id="displayLabel">@item.Diem</span>
					@if (User.IsInRole("Teacher") || User.IsInRole("Admin"))
					{
						<input type="number" id="editInput" style="display:none;" value="@item.Diem" />
						<button onclick="toggleEdit()" id="editButton">Edit</button>
						<button onclick="saveGrade('@item.IdBaiNop')" id="saveButton" style="display:none;">Save</button>
					}

				</td>

			</tr>
		}
	</tbody>
</table>

<script>
	function toggleEdit() {
		var displayLabel = document.getElementById('displayLabel');
		var editInput = document.getElementById('editInput');
		var saveButton = document.getElementById('saveButton');
		var editButton = document.getElementById('editButton');

		if (displayLabel.style.display === 'none') {
			displayLabel.style.display = 'inline';
			editButton.style.display = 'inline';
			editInput.style.display = 'none';
			saveButton.style.display = 'none';
		} else {
			displayLabel.style.display = 'none';
			editButton.style.display = 'none';
			editInput.style.display = 'inline';
			saveButton.style.display = 'inline';
			editInput.value = displayLabel.textContent;
		}
	}

	function saveGrade(baiNopId) {
		var displayLabel = document.getElementById('displayLabel');
		var editInput = document.getElementById('editInput');
		var saveButton = document.getElementById('saveButton');
		var editButton = document.getElementById('editButton');

		displayLabel.textContent = editInput.value;
		displayLabel.style.display = 'inline';
		editInput.style.display = 'none';
		saveButton.style.display = 'none';
		editButton.style.display = 'inline';

		var diem = parseFloat(editInput.value); // Sử dụng editInput.value thay vì document.getElementById("diem").value
		if (diem < 0 || diem > 10 || isNaN(diem)) {
			alert("Điểm phải nằm trong khoảng từ 0 đến 10");
			return;
		}

		$.post("/ClassRooms/SaveGrade", { baiNopId: baiNopId, diem: diem }, function (data) {
			if (data.success) {
				alert("Đã lưu điểm thành công!");
			}
		});
	}

</script>